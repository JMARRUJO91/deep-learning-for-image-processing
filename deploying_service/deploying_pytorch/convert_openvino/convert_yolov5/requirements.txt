#include <memory>



#include “mediapipe/framework/calculator_framework.h”

#include “mediapipe/framework/formats/landmark.pb.h”

#include “mediapipe/framework/port/ret_check.h”



Namespace mediapipe {



Namespace {



Constexpr char kNormalizedLandmarksTag[] = “NORM_LANDMARKS”;

Constexpr char kVisibilityTag[] = “VISIBILITY”;



}  // namespace



// A calculator to set landmark visibility.

//

// Inputs:

//   NORM_LANDMARKS: A NormalizedLandmarkList with only a single landmark to set

//     visibility to. It’s a list and not single landmark as split/concatenate

//     calculators work with lists.

//

//   VISIBILITY: Float visibility of the given landmark.

//

// Outputs:

//   NORM_LANDMARKS: A NormalizedLandmarkList with only single landmark with

//     updated visibility.

//

// Example config:

//   node {

//     calculator: “SetLandmarkVisibility”

//     input_stream: “NORM_LANDMARKS:landmarks”

//     input_stream: “VISIBILITY:visibility”

//     output_stream: “NORM_LANDMARKS:landmarks_with_visibility”

//   }

//

Class SetLandmarkVisibilityCalculator : public CalculatorBase {

 Public:

  Static absl::Status GetContract(CalculatorContract* cc);

  Absl::Status Open(CalculatorContext* cc) override;

  Absl::Status Process(CalculatorContext* cc) override;

};

REGISTER_CALCULATOR(SetLandmarkVisibilityCalculator);



Absl::Status SetLandmarkVisibilityCalculator::GetContract(

    CalculatorContract* cc) {

  cc->Inputs().Tag(kNormalizedLandmarksTag).Set<NormalizedLandmarkList>();

  cc->Inputs().Tag(kVisibilityTag).Set<float>();

  cc->Outputs().Tag(kNormalizedLandmarksTag).Set<NormalizedLandmarkList>();



  return absl::OkStatus();

}



Absl::Status SetLandmarkVisibilityCalculator::Open(CalculatorContext* cc) {

  cc->SetOffset(TimestampDiff(0));



  return absl::OkStatus();

}



Absl::Status SetLandmarkVisibilityCalculator::Process(CalculatorContext* cc) {

  // Check that landmark and visibility are not empty.

  // Don’t emit an empty packet for this timestamp.

  If (cc->Inputs().Tag(kNormalizedLandmarksTag).IsEmpty() ||

      cc->Inputs().Tag(kVisibilityTag).IsEmpty()) {

    return absl::OkStatus();

  }



  Const auto& in_landmarks =

      cc->Inputs().Tag(kNormalizedLandmarksTag).Get<NormalizedLandmarkList>();

  RET_CHECK_EQ(in_landmarks.landmark_size(), 1);

  Const NormalizedLandmark& in_landmark = in_landmarks.landmark(0);



  Const auto& visibility = cc->Inputs().Tag(kVisibilityTag).Get<float>();



  Auto out_landmarks = absl::make_unique<NormalizedLandmarkList>();

  NormalizedLandmark* out_landmark = out_landmarks->add_landmark();

  *out_landmark = in_landmark;

  // Update visibility.

  Out_landmark->set_visibility(visibility);



  cc->Outputs()

      .Tag(kNormalizedLandmarksTag)

      .Add(out_landmarks.release(), cc->InputTimestamp());



  Return absl::OkStatus();

}



}  // namespace mediapipe



torch==2.2.0
torchvision==0.12.0
onnx==1.16.0
onnxruntime==1.8.0
protobuf==3.19.5
openvino-dev==2022.1.0
matplotlib
torchmetrics==0.9.1
fonttools>=4.43.0 # not directly required, pinned by Snyk to avoid a vulnerability
imagecodecs>=2023.9.18 # not directly required, pinned by Snyk to avoid a vulnerability
numpy>=1.22.2 # not directly required, pinned by Snyk to avoid a vulnerability
opencv-python>=4.8.1.78 # not directly required, pinned by Snyk to avoid a vulnerability
pillow>=10.3.0 # not directly required, pinned by Snyk to avoid a vulnerability
scipy>=1.10.0rc1 # not directly required, pinned by Snyk to avoid a vulnerability
setuptools>=65.5.1 # not directly required, pinned by Snyk to avoid a vulnerability
transformers>=4.38.0 # not directly required, pinned by Snyk to avoid a vulnerability
wheel>=0.38.0 # not directly required, pinned by Snyk to avoid a vulnerability
requests>=2.32.0 # not directly required, pinned by Snyk to avoid a vulnerability
